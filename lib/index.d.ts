// Generated by dts-bundle v0.7.3

export enum DataCentre {
    IN_1 = 1000,
    US_1 = 2000,
    US_2 = 2100,
    AU_1 = 4000
}
export class Messages {
    static CollectionExists: string;
    static InvalidCollectionData: string;
    static InvalidAppData: string;
    static EntityNotFound: string;
    static EmptyCollectionData: string;
    static DataLimitExceeded: string;
    static EmptyArray: string;
    static InvalidSynonymData: string;
    static BadRequest: string;
    static InvalidCollection: string;
    static DuplicateUser: string;
    static UserCredentialsFailure: string;
    static SchedulerAlreadyInit: string;
    static ApiUnauthorised: string;
    static PasswordError: string;
    static DuplicateAppName: string;
}
export class StatusCode {
    static Ok: number;
    static BadRequest: number;
    static InternalServerError: number;
    static NotFound: number;
    static Created: number;
    static Unauthorised: number;
    static Conflict: number;
}
export class AppToken {
    static appReadToken: string;
    static appWriteToken: string;
}
export class SearchTapAPIClient {
    protected userId: String;
    protected restClient: any;
    constructor(token: String);
    createApp(appTitle: string, locations: DataCentre[]): Promise<any>;
    getApps(skip: number, count: number): Promise<any>;
    getCollections(appWriteToken: string, appId: String, skip: number, count: number): Promise<any>;
    getTokens(appId: String, skip: number, count: number): Promise<any>;
    getAppByTitle(appTitle: String): Promise<any>;
    getCollectionByTitle(appWriteToken: string, appId: String, collectionTitle: string): Promise<any>;
    createCollection(appWriteToken: string, appId: String, collectionTitle: string): Promise<any>;
    createOrElseGetCollection(appWriteToken: string, appId: string, collectionTitle: string): Promise<any>;
    createOrElseGetApp(appTitle: string, locations: DataCentre[]): Promise<any>;
    getAllToken(appId: string): Promise<any[]>;
}

